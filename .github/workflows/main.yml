name: RDP with Dynu DNS
on:
  workflow_dispatch:
jobs:
  secure-rdp:
    runs-on: windows-2022
    timeout-minutes: 360
    steps:
      - name: Configure Core RDP Settings
        run: |
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -Name "fDenyTSConnections" -Value 0 -Force
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "UserAuthentication" -Value 0 -Force
          netsh advfirewall firewall add rule name="RDP" dir=in action=allow protocol=TCP localport=3389
          Restart-Service -Name TermService -Force
      - name: Create RDP User with Secure Password
        run: |
          $password = "Qwe123!"
          $securePass = ConvertTo-SecureString $password -AsPlainText -Force
          New-LocalUser -Name "RDP" -Password $securePass -AccountNeverExpires
          Add-LocalGroupMember -Group "Administrators" -Member "RDP"
          Add-LocalGroupMember -Group "Remote Desktop Users" -Member "RDP"
          echo "RDP_PASSWORD=$password" >> $env:GITHUB_ENV
      - name: Install Tailscale
        run: |
          Invoke-WebRequest -Uri "https://pkgs.tailscale.com/stable/tailscale-setup-latest.exe" -OutFile "tailscale_setup.exe"
          Start-Process -FilePath ".\tailscale_setup.exe" -ArgumentList "/S" -Wait
      - name: Remove Old Tailscale Device if Exists
        shell: powershell
        run: |
          # Variabel yang dibutuhkan
          $tailnet = "${{ secrets.TAILSCALE_TAILNET }}"
          $apiKey = "${{ secrets.TAILSCALE_API_KEY }}"
          $targetHostname = "${{ github.event.repository.name }}".ToLower()

          Write-Host "Mencari perangkat lama dengan nama '$targetHostname'..."

          # Header untuk otentikasi API
          $headers = @{ "Authorization" = "Bearer $apiKey" }

          # Dapatkan semua daftar perangkat di tailnet
          $apiUrl = "https://api.tailscale.com/api/v2/tailnet/$tailnet/devices"
          $response = Invoke-RestMethod -Uri $apiUrl -Headers $headers

          # Cari perangkat yang cocok dengan hostname target
          $deviceToDelete = $response.devices | Where-Object { $_.hostname -eq $targetHostname }

          if ($null -ne $deviceToDelete) {
              $deviceId = $deviceToDelete.id
              Write-Host "Perangkat lama ditemukan dengan ID: $deviceId. Menghapus..."
              
              # Hapus perangkat menggunakan ID-nya
              $deleteUrl = "https://api.tailscale.com/api/v2/device/$deviceId"
              Invoke-RestMethod -Method Delete -Uri $deleteUrl -Headers $headers
              
              Write-Host "Perangkat lama '$targetHostname' berhasil dihapus."
          } else {
              Write-Host "Tidak ada perangkat lama dengan nama '$targetHostname' yang ditemukan. Melanjutkan..."
          }
      - name: Establish Tailscale Connection
        run: |
          # ... (kode yang sudah ada untuk login Tailscale) ...
          $repo_name = "${{ github.event.repository.name }}".ToLower()
          & "$env:ProgramFiles\Tailscale\tailscale.exe" up --authkey=${{ secrets.TAILSCALE_AUTH_KEY }} --hostname=$repo_name
      
          # ... (kode loop untuk mendapatkan IP address tetap sama) ...
          $tsIP = $null
          for ($i=0; $i -lt 12; $i++) {
            $tsIP = & "$env:ProgramFiles\Tailscale\tailscale.exe" ip -4
            if ($tsIP) { break }
            Start-Sleep -Seconds 5
          }
          if (-not $tsIP) { Write-Error "Tailscale IP not assigned."; exit 1 }
          echo "TAILSCALE_IP=$tsIP" >> $env:GITHUB_ENV
      
          # =========================================================
          # ‚ú® BARIS BARU DITAMBAHKAN DI SINI
          # =========================================================
          Write-Host "Getting Tailscale MagicDNS name..."
          # Ambil status dalam format JSON, lalu ekstrak nama DNS dari objek 'Self'
          $statusJson = & "$env:ProgramFiles\Tailscale\tailscale.exe" status --json
          $magicDns = ($statusJson | ConvertFrom-Json).Self.DNSName.TrimEnd('.')
          
          # Simpan MagicDNS ke environment agar bisa dipakai di langkah lain
          echo "MAGIC_DNS=$magicDns" >> $env:GITHUB_ENV
      
          # Tampilkan detail koneksi di Ringkasan (Summary) GitHub Actions
          echo "### üñ•Ô∏è Detail Koneksi Tailscale" >> $env:GITHUB_STEP_SUMMARY
          echo "**Alamat IP:** `$tsIP`" >> $env:GITHUB_STEP_SUMMARY
          echo "**MagicDNS:** `$magicDns`" >> $env:GITHUB_STEP_SUMMARY
          # =========================================================
      - name: Update Dynu DNS Record
        run: |
          $user = '${{ secrets.DYNU_USER }}'
          $pass = '${{ secrets.DYNU_PASS }}'
          $repo_name = "${{ github.event.repository.name }}"
          $hostname = "$($repo_name.ToLower()).freeddns.org"
          $ip = $env:TAILSCALE_IP
          $updateUrl = "https://api.dynu.com/nic/update?hostname=$hostname&myip=$ip&username=$user&password=$pass"
          $userAgent = "GitHubActions-RDP/1.0 $user"
          Write-Host "Updating Dynu record for $hostname..."
          $response = Invoke-RestMethod -Uri $updateUrl -UserAgent $userAgent
          if ($response -like "good*" -or $response -like "nochg*") {
              Write-Host "Successfully updated Dynu DNS. Response: $response"
              echo "DDNS_HOSTNAME=$hostname" >> $env:GITHUB_ENV
          } else {
              Write-Error "Failed to update Dynu DNS. Response: $response"; exit 1
          }
      - name: Send Connection Details to Telegram
        if: success()
        run: |
          $bot_token = '${{ secrets.TELEGRAM_TOKEN }}'
          $chat_id = '${{ secrets.TELEGRAM_CHAT_ID }}'
          $hostname = $env:DDNS_HOSTNAME
          $password = $env:RDP_PASSWORD
          $repo_name = "${{ github.repository }}"
          $magic_dns = $env:MAGIC_DNS 
          $message = @"
          ‚úÖ *Sesi RDP Siap Digunakan*
          --------------------------------------
          üñ•Ô∏è *Alamat* : $hostname
          üåê *MagicDNS* : $magic_dns
          üë§ *Username* : RDP
          üîë *Password* : $password
          --------------------------------------
          Repositori: $repo_name
          "@
          $telegram_url = "https://api.telegram.org/bot$bot_token/sendMessage"
          $body = @{ chat_id = $chat_id; text = $message; parse_mode = 'Markdown' } | ConvertTo-Json
          Invoke-RestMethod -Uri $telegram_url -Method Post -Body $body -ContentType 'application/json'
      - name: Maintain Connection & Send 5-Minute Warning
        run: |
          $repo_name = "${{ github.event.repository.name }}"
          Write-Host "Sesi RDP aktif. Detail koneksi telah dikirim ke Telegram."
          Start-Sleep -Seconds 21300
          $bot_token = '${{ secrets.TELEGRAM_TOKEN }}'
          $chat_id = '${{ secrets.TELEGRAM_CHAT_ID }}'
          $telegram_send_url = "https://api.telegram.org/bot$bot_token/sendMessage"
          $initial_message_text = "‚ö†Ô∏è *Windows $($repo_name.ToUpper()) sisa waktu 5 menit lagi, Segera persiapkan*"
          $body_send = @{ chat_id = $chat_id; text = $initial_message_text; parse_mode = 'Markdown' } | ConvertTo-Json
          try {
              $send_response = Invoke-RestMethod -Uri $telegram_send_url -Method Post -Body $body_send -ContentType 'application/json' -ErrorAction Stop
              $message_id = $send_response.result.message_id
              Write-Host "Pesan awal berhasil dikirim. Message ID: $message_id"
          } catch {
              Write-Error "Gagal mengirim pesan awal. Error: $($_.Exception.Message)"; exit 1
          }
          Start-Sleep -Seconds 30
          $telegram_edit_url = "https://api.telegram.org/bot$bot_token/editMessageText"
          for ($i = 9; $i -ge 1; $i--) {
              $seconds_remaining = $i * 30
              $minutes = [Math]::Floor($seconds_remaining / 60)
              $seconds = $seconds_remaining % 60
              $time_text = if ($seconds -eq 0) { "$minutes menit" } else { "$minutes menit $seconds detik" }
              $edit_message_text = "‚ö†Ô∏è *Windows $($repo_name.ToUpper()) sisa waktu $time_text lagi, Segera persiapkan*"
              Write-Host "Mengedit pesan: sisa $time_text"
              $body_edit = @{ chat_id = $chat_id; message_id = $message_id; text = $edit_message_text; parse_mode = 'Markdown' } | ConvertTo-Json
              try {
                  Invoke-RestMethod -Uri $telegram_edit_url -Method Post -Body $body_edit -ContentType 'application/json' -ErrorAction SilentlyContinue
              } catch {
                  Write-Warning "Gagal mengedit pesan. Error: $($_.Exception.Message)"
              }
              Start-Sleep -Seconds 30
          }
          Write-Host "Sesi RDP telah berakhir."
